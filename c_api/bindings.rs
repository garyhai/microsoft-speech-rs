/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SPX_NOERROR: u32 = 0;
pub const __SPX_TRACE_LEVEL_INFO: u32 = 8;
pub const __SPX_TRACE_LEVEL_WARNING: u32 = 4;
pub const __SPX_TRACE_LEVEL_ERROR: u32 = 2;
pub const __SPX_TRACE_LEVEL_VERBOSE: u32 = 16;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[doc = " <summary>"]
#[doc = " Type definition for SPX result codes."]
#[doc = " </summary>"]
pub type SPXHR = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _spx_empty {}
#[test]
fn bindgen_test_layout__spx_empty() {
    assert_eq!(
        ::std::mem::size_of::<_spx_empty>(),
        0usize,
        concat!("Size of: ", stringify!(_spx_empty))
    );
    assert_eq!(
        ::std::mem::align_of::<_spx_empty>(),
        1usize,
        concat!("Alignment of ", stringify!(_spx_empty))
    );
}
pub type _spxhandle = *mut _spx_empty;
pub type SPXHANDLE = _spxhandle;
pub type SPXASYNCHANDLE = SPXHANDLE;
pub type SPXFACTORYHANDLE = SPXHANDLE;
pub type SPXRECOHANDLE = SPXHANDLE;
pub type SPXRESULTHANDLE = SPXHANDLE;
pub type SPXEVENTHANDLE = SPXHANDLE;
pub type SPXSESSIONHANDLE = SPXHANDLE;
pub type SPXTRIGGERHANDLE = SPXHANDLE;
pub type SPXLUMODELHANDLE = SPXHANDLE;
pub type SPXKEYWORDHANDLE = SPXHANDLE;
pub type SPXERRORHANDLE = SPXHANDLE;
pub type SPXAUDIOSTREAMFORMATHANDLE = SPXHANDLE;
pub type SPXAUDIOSTREAMHANDLE = SPXHANDLE;
pub type SPXAUDIOCONFIGHANDLE = SPXHANDLE;
pub type SPXPROPERTYBAGHANDLE = SPXHANDLE;
pub type SPXSPEECHCONFIGHANDLE = SPXHANDLE;
pub type SPXCONNECTIONHANDLE = SPXHANDLE;
pub type const_char_ptr = *const ::std::os::raw::c_char;
extern "C" {
    #[link_name = "\u{1}_error_get_message"]
    pub fn error_get_message(errorHandle: SPXERRORHANDLE) -> const_char_ptr;
}
extern "C" {
    #[link_name = "\u{1}_error_get_call_stack"]
    pub fn error_get_call_stack(errorHandle: SPXERRORHANDLE) -> const_char_ptr;
}
extern "C" {
    #[link_name = "\u{1}_error_get_error_code"]
    pub fn error_get_error_code(errorHandle: SPXERRORHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_error_release"]
    pub fn error_release(errorHandle: SPXERRORHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_property_bag_is_valid"]
    pub fn property_bag_is_valid(hpropbag: SPXPROPERTYBAGHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_property_bag_set_string"]
    pub fn property_bag_set_string(
        hpropbag: SPXPROPERTYBAGHANDLE,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_property_bag_get_string"]
    pub fn property_bag_get_string(
        hpropbag: SPXPROPERTYBAGHANDLE,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        defaultValue: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_property_bag_free_string"]
    pub fn property_bag_free_string(value: *const ::std::os::raw::c_char) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_property_bag_release"]
    pub fn property_bag_release(hpropbag: SPXPROPERTYBAGHANDLE) -> SPXHR;
}
pub const PropertyId_SpeechServiceConnection_Key: PropertyId = 1000;
pub const PropertyId_SpeechServiceConnection_Endpoint: PropertyId = 1001;
pub const PropertyId_SpeechServiceConnection_Region: PropertyId = 1002;
pub const PropertyId_SpeechServiceAuthorization_Token: PropertyId = 1003;
pub const PropertyId_SpeechServiceAuthorization_Type: PropertyId = 1004;
pub const PropertyId_SpeechServiceConnection_EndpointId: PropertyId = 1005;
pub const PropertyId_SpeechServiceConnection_ProxyHostName: PropertyId = 1100;
pub const PropertyId_SpeechServiceConnection_ProxyPort: PropertyId = 1101;
pub const PropertyId_SpeechServiceConnection_ProxyUserName: PropertyId = 1102;
pub const PropertyId_SpeechServiceConnection_ProxyPassword: PropertyId = 1103;
pub const PropertyId_SpeechServiceConnection_TranslationToLanguages: PropertyId = 2000;
pub const PropertyId_SpeechServiceConnection_TranslationVoice: PropertyId = 2001;
pub const PropertyId_SpeechServiceConnection_TranslationFeatures: PropertyId = 2002;
pub const PropertyId_SpeechServiceConnection_IntentRegion: PropertyId = 2003;
pub const PropertyId_SpeechServiceConnection_RecoMode: PropertyId = 3000;
pub const PropertyId_SpeechServiceConnection_RecoLanguage: PropertyId = 3001;
pub const PropertyId_Speech_SessionId: PropertyId = 3002;
pub const PropertyId_SpeechServiceResponse_RequestDetailedResultTrueFalse: PropertyId = 4000;
pub const PropertyId_SpeechServiceResponse_RequestProfanityFilterTrueFalse: PropertyId = 4001;
pub const PropertyId_SpeechServiceResponse_JsonResult: PropertyId = 5000;
pub const PropertyId_SpeechServiceResponse_JsonErrorDetails: PropertyId = 5001;
pub const PropertyId_CancellationDetails_Reason: PropertyId = 6000;
pub const PropertyId_CancellationDetails_ReasonText: PropertyId = 6001;
pub const PropertyId_CancellationDetails_ReasonDetailedText: PropertyId = 6002;
pub const PropertyId_LanguageUnderstandingServiceResponse_JsonResult: PropertyId = 7000;
pub type PropertyId = u32;
extern "C" {
    #[link_name = "\u{1}_intent_result_get_intent_id"]
    pub fn intent_result_get_intent_id(
        hresult: SPXRESULTHANDLE,
        pszIntentId: *mut ::std::os::raw::c_char,
        cchIntentId: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_intent_trigger_handle_is_valid"]
    pub fn intent_trigger_handle_is_valid(htrigger: SPXTRIGGERHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_intent_trigger_create_from_phrase"]
    pub fn intent_trigger_create_from_phrase(
        htrigger: *mut SPXTRIGGERHANDLE,
        phrase: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_intent_trigger_create_from_language_understanding_model"]
    pub fn intent_trigger_create_from_language_understanding_model(
        htrigger: *mut SPXTRIGGERHANDLE,
        hlumodel: SPXLUMODELHANDLE,
        intentName: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_intent_trigger_handle_release"]
    pub fn intent_trigger_handle_release(htrigger: SPXTRIGGERHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_intent_recognizer_add_intent"]
    pub fn intent_recognizer_add_intent(
        hreco: SPXRECOHANDLE,
        intentId: *const ::std::os::raw::c_char,
        htrigger: SPXTRIGGERHANDLE,
    ) -> SPXHR;
}
#[doc = " <summary>"]
#[doc = " Defines the header of the buffer that returns translation text results. The buffer starts with the header whose structure is"]
#[doc = " defined below, and then follows the translation results for all required languages."]
#[doc = " </summary>"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Result_TranslationTextBufferHeader {
    #[doc = " <summary>"]
    #[doc = " The total size of the buffer, including translation results."]
    #[doc = " </summary>"]
    pub bufferSize: usize,
    #[doc = " <summary>"]
    #[doc = " The number of target languages. This indicates the array size of targetLanguages and translationTexts."]
    #[doc = " </summary>"]
    pub numberEntries: usize,
    #[doc = " <summary>"]
    #[doc = " Points to an array of target language names. The size of the array is numberEntries."]
    #[doc = " </summary>"]
    pub targetLanguages: *mut *mut ::std::os::raw::c_char,
    #[doc = " <summary>"]
    #[doc = " Points to an array of translation texts. The element in the array is the translation text of the target language which has the same index in targetLanguages."]
    #[doc = " </summary>"]
    pub translationTexts: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__Result_TranslationTextBufferHeader() {
    assert_eq!(
        ::std::mem::size_of::<_Result_TranslationTextBufferHeader>(),
        32usize,
        concat!("Size of: ", stringify!(_Result_TranslationTextBufferHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_Result_TranslationTextBufferHeader>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_Result_TranslationTextBufferHeader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>())).bufferSize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>())).numberEntries
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(numberEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>())).targetLanguages
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(targetLanguages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>())).translationTexts
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(translationTexts)
        )
    );
}
pub type Result_TranslationTextBufferHeader = _Result_TranslationTextBufferHeader;
extern "C" {
    #[link_name = "\u{1}_translation_text_result_get_translation_text_buffer_header"]
    pub fn translation_text_result_get_translation_text_buffer_header(
        handle: SPXRESULTHANDLE,
        textBuffer: *mut Result_TranslationTextBufferHeader,
        lengthPointer: *mut usize,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_translation_synthesis_result_get_audio_data"]
    pub fn translation_synthesis_result_get_audio_data(
        handle: SPXRESULTHANDLE,
        audioBuffer: *mut u8,
        lengthPointer: *mut usize,
    ) -> SPXHR;
}
pub type PTRANSLATIONSYNTHESIS_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_translator_synthesizing_audio_set_callback"]
    pub fn translator_synthesizing_audio_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PTRANSLATIONSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_language_understanding_model_handle_is_valid"]
    pub fn language_understanding_model_handle_is_valid(hlumodel: SPXLUMODELHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_language_understanding_model_create_from_uri"]
    pub fn language_understanding_model_create_from_uri(
        hlumodel: *mut SPXLUMODELHANDLE,
        uri: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_language_understanding_model_create_from_app_id"]
    pub fn language_understanding_model_create_from_app_id(
        hlumodel: *mut SPXLUMODELHANDLE,
        appId: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_language_understanding_model_create_from_subscription"]
    pub fn language_understanding_model_create_from_subscription(
        hlumodel: *mut SPXLUMODELHANDLE,
        subscriptionKey: *const ::std::os::raw::c_char,
        appId: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_language_understanding_model__handle_release"]
    pub fn language_understanding_model__handle_release(hlumodel: SPXLUMODELHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_keyword_recognition_model_handle_is_valid"]
    pub fn keyword_recognition_model_handle_is_valid(hkeyword: SPXKEYWORDHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_keyword_recognition_model_handle_release"]
    pub fn keyword_recognition_model_handle_release(hkeyword: SPXKEYWORDHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_keyword_recognition_model_create_from_file"]
    pub fn keyword_recognition_model_create_from_file(
        fileName: *const ::std::os::raw::c_char,
        phkwmodel: *mut SPXKEYWORDHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_format_is_handle_valid"]
    pub fn audio_stream_format_is_handle_valid(hformat: SPXAUDIOSTREAMFORMATHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_format_create_from_default_input"]
    pub fn audio_stream_format_create_from_default_input(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_format_create_from_waveformat_pcm"]
    pub fn audio_stream_format_create_from_waveformat_pcm(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
        samplesPerSecond: u32,
        bitsPerSample: u8,
        channels: u8,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_format_release"]
    pub fn audio_stream_format_release(hformat: SPXAUDIOSTREAMFORMATHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_is_handle_valid"]
    pub fn audio_stream_is_handle_valid(haudioStream: SPXAUDIOSTREAMHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_create_push_audio_input_stream"]
    pub fn audio_stream_create_push_audio_input_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_create_pull_audio_input_stream"]
    pub fn audio_stream_create_pull_audio_input_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_stream_release"]
    pub fn audio_stream_release(haudioStream: SPXAUDIOSTREAMHANDLE) -> SPXHR;
}
pub type CUSTOM_AUDIO_PULL_STREAM_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvContext: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int,
>;
pub type CUSTOM_AUDIO_PULL_STREAM_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(pvContext: *mut ::std::os::raw::c_void)>;
extern "C" {
    #[link_name = "\u{1}_pull_audio_input_stream_set_callbacks"]
    pub fn pull_audio_input_stream_set_callbacks(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
        readCallback: CUSTOM_AUDIO_PULL_STREAM_READ_CALLBACK,
        closeCallback: CUSTOM_AUDIO_PULL_STREAM_CLOSE_CALLBACK,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_push_audio_input_stream_write"]
    pub fn push_audio_input_stream_write(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        buffer: *mut u8,
        size: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_push_audio_input_stream_close"]
    pub fn push_audio_input_stream_close(haudioStream: SPXAUDIOSTREAMHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_config_is_handle_valid"]
    pub fn audio_config_is_handle_valid(haudioConfig: SPXAUDIOCONFIGHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_audio_config_create_audio_input_from_default_microphone"]
    pub fn audio_config_create_audio_input_from_default_microphone(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_config_create_audio_input_from_wav_file_name"]
    pub fn audio_config_create_audio_input_from_wav_file_name(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        fileName: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_config_create_audio_input_from_stream"]
    pub fn audio_config_create_audio_input_from_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: SPXAUDIOSTREAMHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_config_create_push_audio_input_stream"]
    pub fn audio_config_create_push_audio_input_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_config_create_pull_audio_input_stream"]
    pub fn audio_config_create_pull_audio_input_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_audio_config_release"]
    pub fn audio_config_release(haudioConfig: SPXAUDIOCONFIGHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_create_speech_recognizer_from_config"]
    pub fn recognizer_create_speech_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_create_translation_recognizer_from_config"]
    pub fn recognizer_create_translation_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_create_intent_recognizer_from_config"]
    pub fn recognizer_create_intent_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_handle_is_valid"]
    pub fn recognizer_handle_is_valid(hreco: SPXRECOHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_handle_release"]
    pub fn recognizer_handle_release(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_async_handle_is_valid"]
    pub fn recognizer_async_handle_is_valid(hasync: SPXASYNCHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_async_handle_release"]
    pub fn recognizer_async_handle_release(hasync: SPXASYNCHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_result_handle_is_valid"]
    pub fn recognizer_result_handle_is_valid(hresult: SPXRESULTHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_result_handle_release"]
    pub fn recognizer_result_handle_release(hresult: SPXRESULTHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_event_handle_is_valid"]
    pub fn recognizer_event_handle_is_valid(hevent: SPXEVENTHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_event_handle_release"]
    pub fn recognizer_event_handle_release(hevent: SPXEVENTHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_enable"]
    pub fn recognizer_enable(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_disable"]
    pub fn recognizer_disable(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_is_enabled"]
    pub fn recognizer_is_enabled(hreco: SPXRECOHANDLE, pfEnabled: *mut bool) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_get_property_bag"]
    pub fn recognizer_get_property_bag(
        hreco: SPXRECOHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_recognize_once"]
    pub fn recognizer_recognize_once(hreco: SPXRECOHANDLE, phresult: *mut SPXRESULTHANDLE)
        -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_recognize_once_async"]
    pub fn recognizer_recognize_once_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_recognize_once_async_wait_for"]
    pub fn recognizer_recognize_once_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_start_continuous_recognition"]
    pub fn recognizer_start_continuous_recognition(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_start_continuous_recognition_async"]
    pub fn recognizer_start_continuous_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_start_continuous_recognition_async_wait_for"]
    pub fn recognizer_start_continuous_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_stop_continuous_recognition"]
    pub fn recognizer_stop_continuous_recognition(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_stop_continuous_recognition_async"]
    pub fn recognizer_stop_continuous_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_stop_continuous_recognition_async_wait_for"]
    pub fn recognizer_stop_continuous_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_start_keyword_recognition"]
    pub fn recognizer_start_keyword_recognition(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_start_keyword_recognition_async"]
    pub fn recognizer_start_keyword_recognition_async(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_start_keyword_recognition_async_wait_for"]
    pub fn recognizer_start_keyword_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_stop_keyword_recognition"]
    pub fn recognizer_stop_keyword_recognition(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_stop_keyword_recognition_async"]
    pub fn recognizer_stop_keyword_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_stop_keyword_recognition_async_wait_for"]
    pub fn recognizer_stop_keyword_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
pub type PSESSION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_recognizer_session_started_set_callback"]
    pub fn recognizer_session_started_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PSESSION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_session_stopped_set_callback"]
    pub fn recognizer_session_stopped_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PSESSION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
pub type PRECOGNITION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_recognizer_recognizing_set_callback"]
    pub fn recognizer_recognizing_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_recognized_set_callback"]
    pub fn recognizer_recognized_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_canceled_set_callback"]
    pub fn recognizer_canceled_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_speech_start_detected_set_callback"]
    pub fn recognizer_speech_start_detected_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_speech_end_detected_set_callback"]
    pub fn recognizer_speech_end_detected_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_session_event_get_session_id"]
    pub fn recognizer_session_event_get_session_id(
        hevent: SPXEVENTHANDLE,
        pszSessionId: *mut ::std::os::raw::c_char,
        cchSessionId: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_recognition_event_get_offset"]
    pub fn recognizer_recognition_event_get_offset(
        hevent: SPXEVENTHANDLE,
        pszOffset: *mut u64,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_recognizer_recognition_event_get_result"]
    pub fn recognizer_recognition_event_get_result(
        hevent: SPXEVENTHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> SPXHR;
}
pub const Result_Reason_ResultReason_NoMatch: Result_Reason = 0;
pub const Result_Reason_ResultReason_Canceled: Result_Reason = 1;
pub const Result_Reason_ResultReason_RecognizingSpeech: Result_Reason = 2;
pub const Result_Reason_ResultReason_RecognizedSpeech: Result_Reason = 3;
pub const Result_Reason_ResultReason_RecognizingIntent: Result_Reason = 4;
pub const Result_Reason_ResultReason_RecognizedIntent: Result_Reason = 5;
pub const Result_Reason_ResultReason_TranslatingSpeech: Result_Reason = 6;
pub const Result_Reason_ResultReason_TranslatedSpeech: Result_Reason = 7;
pub const Result_Reason_ResultReason_SynthesizingAudio: Result_Reason = 8;
pub const Result_Reason_ResultReason_SynthesizingAudioComplete: Result_Reason = 9;
pub type Result_Reason = u32;
pub const Result_CancellationReason_CancellationReason_Error: Result_CancellationReason = 1;
pub const Result_CancellationReason_CancellationReason_EndOfStream: Result_CancellationReason = 2;
pub type Result_CancellationReason = u32;
pub const Result_CancellationErrorCode_CancellationErrorCode_NoError: Result_CancellationErrorCode =
    0;
pub const Result_CancellationErrorCode_CancellationErrorCode_AuthenticationFailure:
    Result_CancellationErrorCode = 1;
pub const Result_CancellationErrorCode_CancellationErrorCode_BadRequest:
    Result_CancellationErrorCode = 2;
pub const Result_CancellationErrorCode_CancellationErrorCode_TooManyRequests:
    Result_CancellationErrorCode = 3;
pub const Result_CancellationErrorCode_CancellationErrorCode_Forbidden:
    Result_CancellationErrorCode = 4;
pub const Result_CancellationErrorCode_CancellationErrorCode_ConnectionFailure:
    Result_CancellationErrorCode = 5;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceTimeout:
    Result_CancellationErrorCode = 6;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceError:
    Result_CancellationErrorCode = 7;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceUnavailable:
    Result_CancellationErrorCode = 8;
pub const Result_CancellationErrorCode_CancellationErrorCode_RuntimeError:
    Result_CancellationErrorCode = 9;
pub type Result_CancellationErrorCode = u32;
pub const Result_NoMatchReason_NoMatchReason_NotRecognized: Result_NoMatchReason = 1;
pub const Result_NoMatchReason_NoMatchReason_InitialSilenceTimeout: Result_NoMatchReason = 2;
pub const Result_NoMatchReason_NoMatchReason_InitialBabbleTimeout: Result_NoMatchReason = 3;
pub type Result_NoMatchReason = u32;
extern "C" {
    #[link_name = "\u{1}_result_get_reason"]
    pub fn result_get_reason(hresult: SPXRESULTHANDLE, reason: *mut Result_Reason) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_reason_canceled"]
    pub fn result_get_reason_canceled(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_CancellationReason,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_canceled_error_code"]
    pub fn result_get_canceled_error_code(
        hresult: SPXRESULTHANDLE,
        errorCode: *mut Result_CancellationErrorCode,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_no_match_reason"]
    pub fn result_get_no_match_reason(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_NoMatchReason,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_result_id"]
    pub fn result_get_result_id(
        hresult: SPXRESULTHANDLE,
        pszResultId: *mut ::std::os::raw::c_char,
        cchResultId: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_text"]
    pub fn result_get_text(
        hresult: SPXRESULTHANDLE,
        pszText: *mut ::std::os::raw::c_char,
        cchText: u32,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_offset"]
    pub fn result_get_offset(hresult: SPXRESULTHANDLE, offset: *mut u64) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_duration"]
    pub fn result_get_duration(hresult: SPXRESULTHANDLE, duration: *mut u64) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_result_get_property_bag"]
    pub fn result_get_property_bag(
        hresult: SPXRESULTHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_session_from_recognizer"]
    pub fn session_from_recognizer(hreco: SPXRECOHANDLE, phsession: *mut SPXSESSIONHANDLE)
        -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_session_handle_is_valid"]
    pub fn session_handle_is_valid(hsession: SPXSESSIONHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_session_handle_release"]
    pub fn session_handle_release(hsession: SPXSESSIONHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_session_get_property_bag"]
    pub fn session_get_property_bag(
        hsession: SPXSESSIONHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_connection_from_recognizer"]
    pub fn connection_from_recognizer(
        recognizerHandle: SPXRECOHANDLE,
        connectionHandle: *mut SPXCONNECTIONHANDLE,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_connection_handle_is_valid"]
    pub fn connection_handle_is_valid(handle: SPXCONNECTIONHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_connection_handle_release"]
    pub fn connection_handle_release(handle: SPXCONNECTIONHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_connection_open"]
    pub fn connection_open(handle: SPXCONNECTIONHANDLE, forContinuousRecognition: bool) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_connection_close"]
    pub fn connection_close(handle: SPXCONNECTIONHANDLE) -> SPXHR;
}
pub type CONNECTION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(event: SPXEVENTHANDLE, context: *mut ::std::os::raw::c_void),
>;
extern "C" {
    #[link_name = "\u{1}_connection_connected_set_callback"]
    pub fn connection_connected_set_callback(
        connection: SPXCONNECTIONHANDLE,
        callback: CONNECTION_CALLBACK_FUNC,
        context: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_connection_disconnected_set_callback"]
    pub fn connection_disconnected_set_callback(
        connection: SPXCONNECTIONHANDLE,
        Callback: CONNECTION_CALLBACK_FUNC,
        context: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
pub const SpeechOutputFormat_SpeechOutputFormat_Simple: SpeechOutputFormat = 0;
pub const SpeechOutputFormat_SpeechOutputFormat_Detailed: SpeechOutputFormat = 1;
pub type SpeechOutputFormat = u32;
extern "C" {
    #[link_name = "\u{1}_speech_config_is_handle_valid"]
    pub fn speech_config_is_handle_valid(hconfig: SPXSPEECHCONFIGHANDLE) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_speech_config_from_subscription"]
    pub fn speech_config_from_subscription(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        subscription: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_speech_config_from_authorization_token"]
    pub fn speech_config_from_authorization_token(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        authToken: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_speech_config_from_endpoint"]
    pub fn speech_config_from_endpoint(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        endpoint: *const ::std::os::raw::c_char,
        subscription: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_speech_config_release"]
    pub fn speech_config_release(hconfig: SPXSPEECHCONFIGHANDLE) -> SPXHR;
}
extern "C" {
    #[link_name = "\u{1}_speech_config_get_property_bag"]
    pub fn speech_config_get_property_bag(
        hconfig: SPXSPEECHCONFIGHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
